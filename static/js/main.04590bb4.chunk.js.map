{"version":3,"sources":["components/Timer.js","components/Timer2.js","components/Clock.js","App.js","reportWebVitals.js","index.js"],"names":["React","Component","Timer2","props","useState","min","sec","time","changeTime","console","log","id","useRef","start","step","clear","clearInterval","current","setTimer","startTick","setInterval","times","uTimes","useEffect","onClick","Clock","state","open","toggle","bind","this","setState","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAEyCA,IAAMC,U,cCAlCC,EAAS,SAACC,GACnB,IAD4B,EAGDC,mBAAU,CAACC,IAAKF,EAAME,IAAKC,IAAKH,EAAMG,MAHrC,mBAGrBC,EAHqB,KAGfC,EAHe,KAI5BC,QAAQC,IAAKH,GACb,IAAMI,EAAKC,iBAAQ,MACfC,GAAQ,EACNC,EAAmB,IAAZX,EAAMW,KACbC,EAAQ,WACVC,cAAeL,EAAGM,UATM,EAWJb,mBAAS,MAXL,mBAWfc,GAXe,WAatBC,EAAW,WAETR,EAAGM,QAAUG,aAAc,WACvBZ,GAAW,SAACa,GACR,IAAMC,EAAM,eAAOD,GAavB,OAZQC,EAAOhB,IAAM,IACbgB,EAAOhB,IAAMgB,EAAOhB,IAAKH,EAAMW,MAGnCQ,EAAOhB,KAAO,IACK,IAAfgB,EAAOjB,IACPW,cAAeL,EAAGM,SACZK,EAAOjB,IAAI,IACjBiB,EAAOjB,IAAMiB,EAAOjB,IAAM,EAC1BiB,EAAOhB,IAAM,GAAKH,EAAMW,OAGzBQ,OAETR,GACAI,EAAUP,EAAGM,UAevB,OAPAM,qBAAY,WAIJ,OAHU,IAAVV,GACAM,IAEO,kBAAKJ,OACjB,IAGC,gCACI,wBAAQS,QAASL,EAAjB,mBACA,wBAAQK,QAfE,WACdX,GAAQ,EACRJ,QAAQC,IAAK,gBAAgBH,EAAKF,IAAK,IAAKE,EAAKD,KACjDS,KAYI,kBACA,0CAAaR,EAAKF,IAAlB,MAA0BE,EAAKD,IAAI,GAAT,WAAkBC,EAAKD,KAAQC,EAAKD,WC/C7DmB,EAAK,kDACd,WAAatB,GAAO,IAAD,8BACf,cAAMA,IAEDuB,MAAQ,CACTC,MAAM,GAEV,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBANC,EADL,0CAYd,WACIC,KAAKC,UAAS,kBAAa,CACvBJ,MADU,EAAEA,WAbN,oBAiBd,WAAU,IACEA,EAASG,KAAKJ,MAAdC,KACR,OACI,gCACI,yBAAQH,QAASM,KAAKF,OAAtB,UAA+BD,EAAO,QAAQ,OAA9C,YAIA,cAAC,EAAD,CAAQtB,IAAK,EAAGC,IAAK,EAAGQ,KAAM,WAzB5B,GAAuBd,IAAMC,WCQhC+B,MAVf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,6CACA,cAAC,EAAD,QCGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.04590bb4.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport const Timer = class Timer extends React.Component {\r\n       state = {         \r\n            start:false,\r\n        }\r\n  \r\n\r\n    startOnClick = () => {\r\n        \r\n        if (this.state.start){\r\n            clearInterval (this.ticker);\r\n            this.setState ({start: false})\r\n        } else {\r\n            const step = this.props.step*1000;\r\n            this.ticker = setInterval ( ()=>{ \r\n                const {min,sec} = this.props;\r\n                if (sec>0){\r\n                   sec = sec-1\r\n                }  \r\n                if (sec===0){\r\n                    if (min === 0){\r\n                        clearInterval (this.ticker)\r\n                    }else {\r\n                        this.setState (({min})=>({min:min-1, sec:59}))\r\n                    }\r\n                }\r\n        },step)\r\n    }\r\n}\r\n    stopOnlick = () => {\r\n        clearInterval (this.ticker) \r\n        console.log ('time left', this.props.min, ':', this.props.sec <10? `0${this.props.sec}`: this.props.sec)\r\n    }\r\n\r\n\r\n\r\n\r\n    render (){\r\n        const {min,sec}= this.props\r\n        console.log (this.props)\r\n        return (\r\n            <div>\r\n                <time>Time remaining {min} : {sec<10? `0${sec}`: sec}</time>\r\n                <button onClick={this.startOnClick}>Start</button>\r\n                <button onClick={this.stopOnlick}>Stop</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useEffect, useRef, useState } from 'react';\r\n\r\nexport const Timer2 = (props) =>{\r\n    let sec = 0;\r\n    let min = 0;\r\n    const [time, changeTime] = useState ({min: props.min, sec: props.sec});\r\n    console.log (time);\r\n    const id = useRef (null);\r\n    let start = false;\r\n    const step = props.step *1000;\r\n    const clear = ()=>{\r\n        clearInterval (id.current);\r\n    }\r\n    const [timer,setTimer] =useState(null)\r\n\r\n    const startTick =() =>{\r\n\r\n            id.current = setInterval ( ()=>{\r\n                changeTime((times)=>{\r\n                    const uTimes = {...times}\r\n                    if (uTimes.sec > 0){\r\n                        uTimes.sec = uTimes.sec- props.step;\r\n                       \r\n                    } \r\n                if (uTimes.sec <= 0 ){\r\n                    if (uTimes.min === 0) {\r\n                        clearInterval (id.current)\r\n                    } else if(uTimes.min>0){\r\n                        uTimes.min = uTimes.min - 1;\r\n                        uTimes.sec = 60 - props.step;\r\n                    }\r\n                }\r\n                return uTimes;\r\n            })\r\n            },step); \r\n              setTimer (id.current) \r\n    }\r\n\r\n    const stoptTick = ()=> {\r\n        start = false;\r\n        console.log ('time remind: ',time.min ,':', time.sec)\r\n        clear ();\r\n    }\r\n    useEffect ( ()=>{\r\n        if (start === true){\r\n            startTick ();\r\n        }\r\n            return ()=> clear();\r\n    }, []);\r\n     \r\n    return (\r\n        <div>\r\n            <button onClick={startTick}>click</button>\r\n            <button onClick={stoptTick}>stop</button>\r\n            <time>Timer {time.min} : {time.sec<10 ? `0${time.sec}` : time.sec}</time>\r\n       \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\n\r\nimport { Timer } from \"./Timer\";\r\nimport { Timer2 } from \"./Timer2\";\r\n\r\n\r\n\r\nexport const Clock = class Clock extends React.Component {\r\n    constructor (props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            open: true\r\n        }\r\n        this.toggle = this.toggle.bind(this);\r\n\r\n    }\r\n    \r\n    \r\n    toggle () { \r\n        this.setState(({open}) => ({\r\n            open: !open\r\n        }))\r\n    }\r\n    render() {\r\n        const { open } = this.state\r\n        return(\r\n            <div>\r\n                <button onClick={this.toggle}>{open ? 'Close':'Open'} Clock</button>\r\n                {/*<Ticker name = 'New Clock'/> */}\r\n              \r\n\r\n                <Timer2 min={1} sec={7} step={2}/>\r\n                {/*<Timer step ={1} min={0} sec={10} />*/}\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n}","\nimport './App.css';\n\nimport { Clock } from './components/Clock';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Curent Time</h1>\n      <Clock />\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}